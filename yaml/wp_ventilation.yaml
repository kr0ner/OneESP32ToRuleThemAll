fan:
  - platform: template
    name: ${property}
    id: ${property}
    speed_count: 3
    restore_mode: RESTORE_DEFAULT_OFF
    on_speed_set:
      - lambda: |-
          const auto fan_speed = std::min(3, x);
          ESP_LOGI("fan", "Speed set %d", fan_speed);
          sendData(Kessel, Property::k${property}, fan_speed);
          scheduleRequest(Kessel, Property::kZULUFT_SOLL, std::chrono::seconds(10));
          scheduleRequest(Kessel, Property::kZULUFT_IST, std::chrono::seconds(10));
          scheduleRequest(Kessel, Property::kABLUFT_SOLL, std::chrono::seconds(10));
          scheduleRequest(Kessel, Property::kABLUFT_IST, std::chrono::seconds(10));
    on_turn_off:
      - lambda: |-
          ESP_LOGI("fan", "Fan turned off!");
          sendData(Kessel, Property::k${property}, 0U);
          scheduleRequest(Kessel, Property::kZULUFT_SOLL, std::chrono::seconds(10));
          scheduleRequest(Kessel, Property::kZULUFT_IST, std::chrono::seconds(10));
          scheduleRequest(Kessel, Property::kABLUFT_SOLL, std::chrono::seconds(10));
          scheduleRequest(Kessel, Property::kABLUFT_IST, std::chrono::seconds(10));
    on_turn_on:
      - lambda: |-
          ESP_LOGI("fan", "Fan turned on!");
          sendData(Kessel, Property::k${property}, id(${property}).speed);
          scheduleRequest(Kessel, Property::kZULUFT_SOLL, std::chrono::seconds(10));
          scheduleRequest(Kessel, Property::kZULUFT_IST, std::chrono::seconds(10));
          scheduleRequest(Kessel, Property::kABLUFT_SOLL, std::chrono::seconds(10));
          scheduleRequest(Kessel, Property::kABLUFT_IST, std::chrono::seconds(10));

esphome:
  on_boot:
    priority: 100.0 # AFTER_CONNECTION
    then:
      - lambda: |-
          CallbackHandler::instance().addCallbacks({std::make_pair(Kessel,Property::k${property}),
                                                   std::make_pair(Manager,Property::k${property})},[](const SimpleVariant& value){
              const auto fan_speed = std::min(static_cast<std::uint16_t>(3U),static_cast<std::uint16_t>(value));
              // only speeds between 1 and speed_count are allowed
              if(fan_speed == 0) {
                id(${property}).turn_off().perform();
              } else {
                id(${property}).turn_on().set_speed(fan_speed).perform();
              }
          });
          queueRequest(Kessel, Property::k${property});
