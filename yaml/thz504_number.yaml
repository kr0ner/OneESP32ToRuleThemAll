defaults:
  interval: $interval_very_slow
  target: "Kessel"
  step: "1"

number:
  - platform: template
    name: ${property}
    id: ${property}
    icon: "mdi:valve"
    min_value: 0
    max_value: 100
    step: ${step}
    initial_value: NAN
    optimistic: true
    update_interval: ${interval}
    set_action:
      - lambda: |-
          ESP_LOGI("Number", "New value %f", x);
          if(x != NAN) {
            const auto type = Mapper::instance().getType(Property::k${property});
            switch(type) {
              case Type::et_little_endian: {
                  const auto value{static_cast<std::uint16_t>(x)};
                  const auto raw_value = static_cast<std::uint16_t>((((value >> 8U) & 0xFF) | ((value & 0xff) << 8U)));
                  sendData(${target}, Property::k${property}, raw_value);
                  break;
                }
              default:
                sendData(${target}, Property::k${property}, static_cast<std::uint16_t>(round(x / ${step})));
                break;
            }
          }

esphome:
  on_boot:
    priority: -100
    then:
      - lambda: |-
          CallbackHandler::instance().addCallback(std::make_pair(${target},Property::k${property}),[](const SimpleVariant& value){
              using type = TypeMapping<Property::k${property}>::type;
              id(${property}).publish_state(value.get<type>());
          });
          queueRequest(${target}, Property::k${property});
