defaults:
  icon: "mdi:lightning-bolt"
  accuracy_decimals: "2"
  target: "Kessel"

globals:
  - id: gOFFSET_${property_wh}
    type: float
    restore_value: yes
    initial_value: "0.0"

sensor:
  - platform: template
    name: ${property_wh}
    id: ${property_wh}
    unit_of_measurement: "Wh"
    state_class: "measurement"
    accuracy_decimals: 0
    internal: true
    filters:
      - multiply: 0.001
      - lambda: |-
          return x - id(gOFFSET_${property_wh});
      
  - platform: template
    name: ${sensor_name}
    id: ${sensor_name}
    unit_of_measurement: "kWh"
    icon: ${icon}
    accuracy_decimals: ${accuracy_decimals}
    device_class: energy
    state_class: total_increasing

esphome:
  on_boot:
    priority: -100
    then:
      - lambda: |-
          // Handle the values received from the heat pump. Wh value is just stored in an internal sensor and published together with the kWh value on reception.
          CallbackHandler::instance().addCallback(std::make_pair(${target},Property::k${property_wh}),[](const SimpleVariant& value){
            id(${property_wh}).publish_state(value);
          });
          CallbackHandler::instance().addCallback(std::make_pair(${target},Property::k${property_kwh}),[](const SimpleVariant& value){
            id(${sensor_name}).publish_state(value.get<std::uint16_t>() + id(${property_wh}).state);
          });
          // initial queueing of the Wh and kWh value
          queueRequest(${target}, Property::k${property_wh});
          queueRequest(${target}, Property::k${property_kwh});

time:
  - platform: sntp
    on_time:
      # Every hour, every 5 minutes except midnight.
      - seconds: 0
        minutes: 5/5
        hours: 0-23
        then:
          - lambda: |-
              queueRequest(${target}, Property::k${property_wh});
              queueRequest(${target}, Property::k${property_kwh});
      - seconds: 0
        minutes: 0
        hours: 1-23
        then:
          - lambda: |-
              queueRequest(${target}, Property::k${property_wh});
              queueRequest(${target}, Property::k${property_kwh});
      # At midnight reset power consumptions. And save offset for the next day.
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - lambda: |-
              // set the current Wh value as offset for the next day and convert Wh to kWh
              id(gOFFSET_${property_wh}) = id(${property_wh}).state;
          - sensor.template.publish:
              id: ${sensor_name}
              state: 0.0
