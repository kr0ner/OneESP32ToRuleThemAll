esphome:
  includes:
    - OneESP32ToRuleThemAll/src/custom_climate.h
  on_boot:
    priority: -100
    then:
      - lambda: |-
          CallbackHandler::instance().addCallback(std::make_pair(Kessel,Property::kPASSIVKUEHLUNG),[](const SimpleVariant& value){
            const auto stringValue{Mapper::instance().getPassivkuehlung(value).value_or("Unbekannt")};
            const auto index = id(PASSIVKUEHLUNG).index_of(stringValue);
            if(index.has_value()) {
              id(PASSIVKUEHLUNG).publish_state(stringValue);
            }
          });
          queueRequest(Kessel, Property::kPASSIVKUEHLUNG);

          CallbackHandler::instance().addCallback(std::make_pair(Kessel,Property::kZULUFT_IST),[](const SimpleVariant& value){
            // workaround for broken ninth bit of BETRIEBSSTATUS
            const auto zuluftIst = static_cast<std::uint16_t>(value);
            id(LUEFTUNG).publish_state(zuluftIst > 0U);
          });

          CallbackHandler::instance().addCallbacks({std::make_pair(Kessel,Property::kABLUFT_SOLL),
                                                    std::make_pair(Kessel,Property::kZULUFT_SOLL)},
                                                    [](const SimpleVariant&) {
            const auto airflowIn{id(ZULUFT_SOLL).state};
            const auto airflowOut{id(ABLUFT_SOLL).state};
            auto getPower = [](const float airflow){
              if(airflow < 0.1f) {
                return 0.0f;
              }
              /* This equation is base on the following measurement:
               * airflow (l/min)       : 0 140 190 220 300
               * combined fan power (W): 0  30  50  80 170
               * @note: the last value is taken as from the THZ504 specification.
               */
              return (0.00005f * std::pow(airflow, 2.5f) + 3.0f);
            };
            id(FAN_POWER).publish_state(getPower(airflowIn) + getPower(airflowOut));
          });

          id(ELEKTRISCHE_NACHERWAERMUNG).add_on_state_callback([](const bool state){
            const auto electricHeatingPower = state ? id(NE_STUFE_WW).state * 230.0 /*V*/ * 16.0 /*A*/ : 0.0f;
            id(ELECTRIC_HEATING_POWER).publish_state(electricHeatingPower);
          });

          CallbackHandler::instance().addCallback(std::make_pair(Kessel,Property::kPROGRAMMSCHALTER),[](const SimpleVariant& value){
            const auto stringValue{value.get<std::string>()};
            const auto index = id(PROGRAMMSCHALTER).index_of(stringValue);
            if(index.has_value()) {
              id(PROGRAMMSCHALTER).publish_state(stringValue);
            }
          });
          queueRequest(Kessel, Property::kPROGRAMMSCHALTER);

          CallbackHandler::instance().addCallback(std::make_pair(Kessel,Property::kBETRIEBS_STATUS_2),[](const SimpleVariant& value){
            const std::bitset<2U> status_bits{static_cast<std::uint16_t>(value)};
            id(SOMMERBETRIEB_AKTIV).publish_state(status_bits.test(0U));
            id(OFEN_KAMIN_AKTIV).publish_state(status_bits.test(1U));
          });
          queueRequest(Kessel, Property::kBETRIEBS_STATUS_2);

          CallbackHandler::instance().addCallback(std::make_pair(Kessel,Property::kBETRIEBS_STATUS),[](const SimpleVariant& value){
            const std::bitset<15U> status_bits{static_cast<std::uint16_t>(value)};
            id(SCHALTPROGRAMM_AKTIV).publish_state(status_bits.test(0U));
            id(VERDICHTER).publish_state(status_bits.test(1U));
            id(HEIZEN).publish_state(status_bits.test(2U));
            id(KUEHLEN).publish_state(status_bits.test(3U));
            id(WARMWASSERBEREITUNG).publish_state(status_bits.test(4U));
            id(ELEKTRISCHE_NACHERWAERMUNG).publish_state(status_bits.test(5U));
            id(SERVICE).publish_state(status_bits.test(6U));
            id(EVU_SPERRE).publish_state(status_bits.test(7U));
            id(FILTERWECHSEL_BEIDE).publish_state(status_bits.test(8U));
            // seems to be broken id(LUEFTUNG).publish_state(status_bits.test(9U));
            id(HEIZKREISPUMPE).publish_state(status_bits.test(10U));
            id(ABTAUEN_VERDAMPFER).publish_state(status_bits.test(11U));
            id(FILTERWECHSEL_ABLUFT).publish_state(status_bits.test(12U));
            id(FILTERWECHSEL_ZULUFT).publish_state(status_bits.test(13U));
            id(AUFHEIZPROGRAMM_AKTIV).publish_state(status_bits.test(14U));
          });
          queueRequest(Kessel, Property::kBETRIEBS_STATUS);

#########################################
#                                       #
#   Selects                             #
#                                       #
#########################################
select:
  - platform: template
    name: "PASSIVKUEHLUNG"
    id: PASSIVKUEHLUNG
    options:
      - "Aus"
      - "Ablüften"
      - "Zulüften"
      - "Bypass"
      - "Sommerkassette"
      - "Unbekannt"
    initial_option: "Unbekannt"
    optimistic: true
    setup_priority: 100
    set_action:
      then:
        - lambda: |-
            const auto passivkuehlungId = Mapper::instance().getPassivkuehlungId(x);
            if(passivkuehlungId.has_value()) {
              sendData(Kessel, Property::kPASSIVKUEHLUNG, passivkuehlungId.value());
            }

  - platform: template
    name: "PROGRAMMSCHALTER"
    id: PROGRAMMSCHALTER
    options:
      - "Notbetrieb"
      - "Bereitschaft"
      - "Automatik"
      - "Tagbetrieb"
      - "Absenkbetrieb"
      - "Warmwasser"
      - "Handbetrieb"
      - "Unbekannt"
    initial_option: "Unbekannt"
    optimistic: true
    setup_priority: 100
    set_action:
      then:
        - lambda: |-
            const auto betriebsartId = Mapper::instance().getBetriebsartId(x);
            if(betriebsartId.has_value()) {
              sendData(Kessel, Property::kPROGRAMMSCHALTER, betriebsartId.value());
            }

#########################################
#                                       #
#   Switches                            #
#                                       #
#########################################
switch:
  - platform: template
    name: "KUEHLUNG HK1"
    id: KUEHLUNGHK1
    optimistic: true
    turn_on_action:
      - lambda: |-
          sendData(HK1, Property::kKUEHLMODE, static_cast<std::uint16_t>(true));
    turn_off_action:
      - lambda: |-
          sendData(HK1, Property::kKUEHLMODE, static_cast<std::uint16_t>(false));

#########################################
#                                       #
#   Template Sensors                    #
#                                       #
#########################################
sensor:
  - platform: template
    name: "FAN POWER"
    id: FAN_POWER
    state_class: measurement
    device_class: power
    unit_of_measurement: "W"
  - platform: template
    name: "ELECTRIC HEATING POWER"
    id: ELECTRIC_HEATING_POWER
    state_class: measurement
    device_class: power
    unit_of_measurement: "W"

#########################################
#                                       #
#   Custom climates                     #
#                                       #
#########################################
climate:
  - platform: custom
    lambda: |-
      auto heating = new HeatingDayNight(id(RAUMISTTEMP),id(RAUMSOLLTEMP_I), id(HEIZEN), id(KUEHLEN), id(LUEFTUNG), Property::kRAUMSOLLTEMP_I, Property::kKUEHL_RAUMSOLL_TAG);
      App.register_component(heating);
      return {heating};
    climates:
      name: "Heating Day"
      visual:
        min_temperature: 10.0
        max_temperature: 25.0
        temperature_step:
          target_temperature: 0.1
          current_temperature: 0.1

  - platform: custom
    lambda: |-
      auto heating = new HeatingDayNight(id(RAUMISTTEMP),id(RAUMSOLLTEMP_NACHT), id(HEIZEN), id(KUEHLEN), id(LUEFTUNG), Property::kRAUMSOLLTEMP_NACHT, Property::kKUEHL_RAUMSOLL_NACHT);
      App.register_component(heating);
      return {heating};
    climates:
      name: "Heating Night"
      visual:
        min_temperature: 10.0
        max_temperature: 25.0
        temperature_step:
          target_temperature: 0.1
          current_temperature: 0.1

  - platform: custom
    lambda: |-
      auto hot_water = new HotWater(id(SPEICHERISTTEMP),id(EINSTELL_SPEICHERSOLLTEMP), id(WARMWASSERBEREITUNG), Property::kEINSTELL_SPEICHERSOLLTEMP);
      App.register_component(hot_water);
      return {hot_water};
    climates:
      name: "Hot Water"
      visual:
        min_temperature: 30.0
        max_temperature: 75.0
        temperature_step:
          target_temperature: 1.0
          current_temperature: 0.1

#########################################
#                                       #
#   Intervals                           #
#                                       #
#########################################
interval:
  - interval: $interval_once_in_a_while
    then:
    - lambda: |-
        queueRequest(Kessel, Property::kBETRIEBS_STATUS_2);

#########################################
#                                       #
#   Packages                            #
#                                       #
#########################################
packages:
  SCHALTPROGRAMM_AKTIV:       !include { file: wp_binary.yaml, vars: { name: "SCHALTPROGRAMM_AKTIV" }}
  VERDICHTER:                 !include { file: wp_binary.yaml, vars: { name: "VERDICHTER" }}
  WARMWASSERBEREITUNG:        !include { file: wp_binary.yaml, vars: { name: "WARMWASSERBEREITUNG" }}
  ELEKTRISCHE_NACHERWAERMUNG: !include { file: wp_binary.yaml, vars: { name: "ELEKTRISCHE_NACHERWAERMUNG" }}
  SERVICE:                    !include { file: wp_binary.yaml, vars: { name: "SERVICE" }}
  HEIZEN:                     !include { file: wp_binary.yaml, vars: { name: "HEIZEN" }}
  KUEHLEN:                    !include { file: wp_binary.yaml, vars: { name: "KUEHLEN" }}
  LUEFTUNG:                   !include { file: wp_binary.yaml, vars: { name: "LUEFTUNG" }}
  EVU_SPERRE:                 !include { file: wp_binary.yaml, vars: { name: "EVU_SPERRE" }}
  FILTERWECHSEL_BEIDE:        !include { file: wp_binary.yaml, vars: { name: "FILTERWECHSEL_BEIDE" }}
  HEIZKREISPUMPE:             !include { file: wp_binary.yaml, vars: { name: "HEIZKREISPUMPE" }}
  ABTAUEN_VERDAMPFER:         !include { file: wp_binary.yaml, vars: { name: "ABTAUEN_VERDAMPFER" }}
  FILTERWECHSEL_ABLUFT:       !include { file: wp_binary.yaml, vars: { name: "FILTERWECHSEL_ABLUFT" }}
  FILTERWECHSEL_ZULUFT:       !include { file: wp_binary.yaml, vars: { name: "FILTERWECHSEL_ZULUFT" }}
  AUFHEIZPROGRAMM_AKTIV:      !include { file: wp_binary.yaml, vars: { name: "AUFHEIZPROGRAMM_AKTIV" }}
  SOMMERBETRIEB_AKTIV:        !include { file: wp_binary.yaml, vars: { name: "SOMMERBETRIEB_AKTIV" }}
  OFEN_KAMIN_AKTIV:           !include { file: wp_binary.yaml, vars: { name: "OFEN_KAMIN_AKTIV" }}

  WAERMEERTRAG_RUECKGE_SUMME_MWH:  !include { file: wp_generic_combined.yaml, vars: { sensor_name: "WAERMEERTRAG_RUECKGE_SUMME_MWH"     , scaled_property: "WAERMEERTRAG_RUECKGE_SUM_KWH" , property: "WAERMEERTRAG_RUECKGE_SUM_MWH" , unit: "MWh", accuracy_decimals: "3", icon: "mdi:fire"  }}

  ABLUFTTEMP:                     !include { file: wp_temperature.yaml, vars: { property: "ABLUFTTEMP"                }}
  EINSTELL_SPEICHERSOLLTEMP:      !include { file: wp_temperature.yaml, vars: { property: "EINSTELL_SPEICHERSOLLTEMP" }}
  SAMMLERISTTEMP:                 !include { file: wp_temperature.yaml, vars: { property: "SAMMLERISTTEMP"           , interval: $interval_medium }}
  TAUPUNKT_HK1:                   !include { file: wp_temperature.yaml, vars: { property: "TAUPUNKT_HK1"             , target: "HK1" }}
  RAUMSOLLTEMP_I:                 !include { file: wp_temperature.yaml, vars: { property: "RAUMSOLLTEMP_I"           , target: "HK1" }}
  RAUMSOLLTEMP_NACHT:             !include { file: wp_temperature.yaml, vars: { property: "RAUMSOLLTEMP_NACHT"       , target: "HK1" }}
  KUEHL_RAUMSOLL_TAG:             !include { file: wp_temperature.yaml, vars: { property: "KUEHL_RAUMSOLL_TAG"       , target: "HK1" }}

  LUEFT_STUFE_TAG:                !include { file: wp_ventilation.yaml, vars: { property: "LUEFT_STUFE_TAG"   }}
  LUEFT_STUFE_NACHT:              !include { file: wp_ventilation.yaml, vars: { property: "LUEFT_STUFE_NACHT" }}
  LUEFT_STUFE_PARTY:              !include { file: wp_ventilation.yaml, vars: { property: "LUEFT_STUFE_PARTY" }}

  ABLUFTFEUCHTE:                  !include { file: wp_generic.yaml, vars: { property: "ABLUFTFEUCHTE"            , interval: $interval_very_slow, unit: "%", icon: "mdi:water-percent"}}
  MOTORSTROM:                     !include { file: wp_generic.yaml, vars: { property: "MOTORSTROM"               , interval: $interval_medium, unit: "A" }}
  MOTORSPANNUNG:                  !include { file: wp_generic.yaml, vars: { property: "MOTORSPANNUNG"            , interval: $interval_medium, unit: "V" }}
  MOTORLEISTUNG:                  !include { file: wp_generic.yaml, vars: { property: "MOTORLEISTUNG"            , interval: $interval_medium, unit: "kW", accuracy_decimals: "2" }}
  VERDICHTERDREHZAHL:             !include { file: wp_generic.yaml, vars: { property: "VERDICHTERDREHZAHL"       , interval: $interval_medium, unit: "Hz"   , icon: "mdi:gauge" }}
  HEIZLEISTUNG:                   !include { file: wp_generic.yaml, vars: { property: "HEIZLEISTUNG"             , interval: $interval_medium, unit: "%"    , icon: "mdi:gauge" }}
  HEIZ_KUEHL_LEISTUNG:            !include { file: wp_generic.yaml, vars: { property: "HEIZ_KUEHL_LEISTUNG"      , interval: $interval_medium, unit: "kW", accuracy_decimals: "2" }}
  ABLUFT_IST:                     !include { file: wp_generic.yaml, vars: { property: "ABLUFT_IST"               , interval: $interval_slow  , unit: "Hz"   , icon: "mdi:fan"   }}
  FORTLUFT_IST:                   !include { file: wp_generic.yaml, vars: { property: "FORTLUFT_IST"             , interval: $interval_slow  , unit: "Hz"   , icon: "mdi:fan"   }}
  ZULUFT_IST:                     !include { file: wp_generic.yaml, vars: { property: "ZULUFT_IST"               , interval: $interval_slow  , unit: "Hz"   , icon: "mdi:fan"   }}
  ABLUFT_SOLL:                    !include { file: wp_generic.yaml, vars: { property: "ABLUFT_SOLL"              , interval: $interval_slow  , unit: "l/min", icon: "mdi:pump"  }}
  FORTLUFT_SOLL:                  !include { file: wp_generic.yaml, vars: { property: "FORTLUFT_SOLL"            , interval: $interval_slow  , unit: "l/min", icon: "mdi:pump"  }}
  ZULUFT_SOLL:                    !include { file: wp_generic.yaml, vars: { property: "ZULUFT_SOLL"              , interval: $interval_slow  , unit: "l/min", icon: "mdi:pump"  }}
  VOLUMENSTROM:                   !include { file: wp_generic.yaml, vars: { property: "VOLUMENSTROM"             , interval: $interval_slow  , unit: "l/min", icon: "mdi:pump"  }}
  LAUFZEIT_FILTER:                !include { file: wp_generic.yaml, vars: { property: "LAUFZEIT_FILTER"          , interval: $interval_once_in_a_while , unit: "%", icon: "mdi:calendar"  }}
  ANZEIGE_NIEDERDRUCK:            !include { file: wp_generic.yaml, vars: { property: "ANZEIGE_NIEDERDRUCK"      , accuracy_decimals: "2" }}
  PUMPENZYKLEN_MIN_AUSSENT:       !include { file: wp_generic.yaml, vars: { property: "PUMPENZYKLEN_MIN_AUSSENT" }}

  NE_STUFE_WW:                    !include { file: wp_number.yaml, vars: { property: "NE_STUFE_WW"                , min: "0", max: "3" }}
  LEISTUNG_AUSLEGUNG_HEIZUNG:     !include { file: wp_number.yaml, vars: { property: "LEISTUNG_AUSLEGUNG_HEIZUNG" }}
  LEISTUNG_AUSLEGUNG_KUEHLEN:     !include { file: wp_number.yaml, vars: { property: "LEISTUNG_AUSLEGUNG_KUEHLEN" }}
  PUMPENDREHZAHL_HEIZEN:          !include { file: wp_number.yaml, vars: { property: "PUMPENDREHZAHL_HEIZEN"      , step: "0.1" }}
  HYSTERESE_WW:                   !include { file: wp_number.yaml, vars: { property: "HYSTERESE_WW"               , min: "2.0", max: "10.0", step: "0.1", unit: "°C" }}
  LUEFT_ZULUFT_STUFE1:            !include { file: wp_number.yaml, vars: { property: "LUEFT_ZULUFT_STUFE1", min: "0.0", max: "300.0", unit: "m³/h", icon: "mdi:air-filter"  }}
  LUEFT_ZULUFT_STUFE2:            !include { file: wp_number.yaml, vars: { property: "LUEFT_ZULUFT_STUFE2", min: "0.0", max: "300.0", unit: "m³/h", icon: "mdi:air-filter"  }}
  LUEFT_ZULUFT_STUFE3:            !include { file: wp_number.yaml, vars: { property: "LUEFT_ZULUFT_STUFE3", min: "0.0", max: "300.0", unit: "m³/h", icon: "mdi:air-filter"  }}
  LUEFT_ABLUFT_STUFE1:            !include { file: wp_number.yaml, vars: { property: "LUEFT_ABLUFT_STUFE1", min: "0.0", max: "300.0", unit: "m³/h", icon: "mdi:air-filter"  }}
  LUEFT_ABLUFT_STUFE2:            !include { file: wp_number.yaml, vars: { property: "LUEFT_ABLUFT_STUFE2", min: "0.0", max: "300.0", unit: "m³/h", icon: "mdi:air-filter"  }}
  LUEFT_ABLUFT_STUFE3:            !include { file: wp_number.yaml, vars: { property: "LUEFT_ABLUFT_STUFE3", min: "0.0", max: "300.0", unit: "m³/h", icon: "mdi:air-filter"  }}

  WAERMEERTRAG_RUECKGE_TAG_SUMME_KWH:  !include { file: wp_daily_energy_combined.yaml, vars: { sensor_name: "WAERMEERTRAG_RUECKGE_TAG_SUMME_KWH" , property_wh: "WAERMEERTRAG_RUECKGE_TAG_WH"    , property_kwh: "WAERMEERTRAG_RUECKGE_TAG_KWH"     }}
