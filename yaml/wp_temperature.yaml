defaults:
  update_interval: $interval_very_slow
  target: "Kessel"
  writable: "false"
  name_suffix: ""

sensor:
  - platform: template
    name: ${property}${name_suffix}
    id: ${property}${name_suffix}
    unit_of_measurement: "Â°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: ${update_interval}
    lambda: |-
        queueRequest(${target}, Property::k${property});
        return {};

esphome:
  on_boot:
    priority: -100
    then:
      - lambda: |-
          auto callback= [](const SimpleVariant& value){
              id(${property}${name_suffix}).publish_state(value);
          };
          CallbackHandler::instance().addCallback(std::make_pair(${target},Property::k${property}),callback);
          if constexpr(${writable}) {
            CallbackHandler::instance().addCallback(std::make_pair(Manager,Property::k${property}),callback);
          }
          queueRequest(${target}, Property::k${property});
